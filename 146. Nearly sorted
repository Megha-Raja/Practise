Given an array arr[], where each element is at most k away from its target position, you need to sort the array optimally.
Note: You need to change the given array arr[] in place.

import heapq
class Solution:
    def nearlySorted(self, arr, k):
        heap = arr[:k + 1]
        heapq.heapify(heap)
        res = []
        i = 0
        curr = k + 1

        while curr < len(arr):
            poped = heapq.heappop(heap)
            arr[i] = poped
            
            heapq.heappush(heap, arr[curr])
            curr += 1
            i += 1
            
        while len(heap):
            curr = heapq.heappop(heap)
            arr[i] = curr
            i += 1
        
        return arr
