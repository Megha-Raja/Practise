Given a pointer/reference to the head of the linked list, the task is to sort the given linked list using Merge Sort.
Note: If the length of the linked list is odd, then the extra node should go into the first list while splitting.

class Solution:
  
    def split(self,head):
        fast = head
        slow = head
        while fast and fast.next:
            fast = fast.next.next
            if fast:
                slow = slow.next
        second = slow.next
        slow.next = None
        return second
    def merge(self,first, second):
        if not first:
            return second
        if not second:
            return first
        if first.data < second.data:
            first.next = self.merge(first.next, second)
            return first
        else:
            second.next = self.merge(first, second.next)
            return second
    def mergeSort(self, head):
        if not head or not head.next:
            return head
        second = self.split(head)
        head = self.mergeSort(head)
        second = self.mergeSort(second)
        return self.merge(head, second)
