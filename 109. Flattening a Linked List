Given a Linked List of size N, where every node represents a sub-linked-list and contains two pointers:
(i) a next pointer to the next node,
(ii) a bottom pointer to a linked list where this node is head.
Each of the sub-linked-list is in sorted order.
Flatten the Link List such that all the nodes appear in a single level while maintaining the sorted order. 
Note: The flattened list will be printed using the bottom pointer instead of next pointer.

'''
class Node:
    def __init__(self, d):
        self.data=d
        self.next=None
        self.bottom=None
        
'''
from heapq import *
class Solution():
    
    def flatten(self,root):
        Node.__lt__ = lambda this, o: this.data < o.data
        pre = ans = Node(-1)
        H = []
        nd = root
        while nd:
            H.append(nd)
            nd=nd.next
        heapify(H)
        while H:
            nd = heappop(H)
            pre.bottom = nd
            pre = nd
            if nd.bottom:
                heappush(H, nd.bottom)
        return ans.bottom
